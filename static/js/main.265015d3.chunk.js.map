{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","props","onChange","target","setContact","value","contacts","map","element","index","name","AppointmentForm","onSubmit","handleSubmit","type","placeholder","title","setTitle","date","min","Date","toLocaleDateString","split","month","day","year","padStart","setDate","time","setTime","Tile","values","Object","object","className","JSON","stringify","TileList","list","AppointmentsPage","useState","contact","e","preventDefault","addAppointment","appointments","ContactForm","setName","phone","setPhone","email","setEmail","ContactsPage","duplicateName","setDuplicateName","useEffect","undefined","find","addContact","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","prevContacts","prevAppointments","appointment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.265015d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = (props) => {\r\n  const handleChange = ({ target }) => {\r\n    props.setContact(target.value);\r\n  };\r\n  return (\r\n    <select onChange={handleChange}>\r\n      <option value=\"\">Please Select</option>\r\n      {props.contacts.map((element, index) => {\r\n        return (\r\n          <option value={element.name} key={index}>\r\n            {element.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from \"./../contactPicker/ContactPicker.js\";\r\nexport const AppointmentForm = (props) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n  const handleTitleChange = ({ target }) => {\r\n    props.setTitle(target.value);\r\n  };\r\n  const handleDateChange = ({ target }) => {\r\n    props.setDate(target.value);\r\n  };\r\n  const handleTimeChange = ({ target }) => {\r\n    props.setTime(target.value);\r\n  };\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Title\"\r\n        value={props.title}\r\n        onChange={handleTitleChange}\r\n      />\r\n      <ContactPicker contacts={props.contacts} setContact={props.setContact} />\r\n      <input\r\n        type=\"date\"\r\n        placeholder=\"Enter date\"\r\n        value={props.date}\r\n        min={getTodayString}\r\n        onChange={handleDateChange}\r\n      />\r\n      <input\r\n        type=\"time\"\r\n        placeholder=\"Enter time\"\r\n        value={props.time}\r\n        onChange={handleTimeChange}\r\n      />\r\n      <input type=\"submit\" value=\"Submit\" />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = (props) => {\r\n  const values = Object.values(props.object);\r\n\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {values.map((element) => {\r\n        if (typeof element === \"object\") {\r\n          return <p className=\"tile\">{JSON.stringify(element)}</p>;\r\n        } else {\r\n          return <p className=\"tile\">{element}</p>;\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from \"./../tile/Tile.js\";\r\n\r\nexport const TileList = (props) => {\r\n  return (\r\n    <div>\r\n      {props.list.map((object, index) => (\r\n        <Tile key={index} object={object} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {AppointmentForm} from '../../components/appointmentForm/AppointmentForm.js';\r\nimport {TileList} from '../../components/tileList/TileList.js';\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n const [title,setTitle] = useState('');\r\n const [contact,setContact] = useState({});\r\n const [date,setDate] = useState('');\r\n const [time,setTime] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    props.addAppointment(title,contact,date,time);\r\n    setTitle('');\r\n    setContact({});\r\n    setDate('');\r\n    setTime('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm handleSubmit={handleSubmit}\r\n        title={title} setTitle={setTitle}\r\n        contact={contact} setContact={setContact}\r\n        date = {date} setDate = {setDate}\r\n        time = {time} setTime = {setTime}\r\n        contacts = {props.contacts}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList list = {props.appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = (props) => {\r\n  const handleNameChange = ({ target }) => {\r\n    props.setName(target.value);\r\n  };\r\n  const handlePhoneChange = ({ target }) => {\r\n    props.setPhone(target.value);\r\n  };\r\n  const handleEmailChange = ({ target }) => {\r\n    props.setEmail(target.value);\r\n  };\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter name\"\r\n        value={props.name}\r\n        onChange={handleNameChange}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Enter phone\"\r\n        value={props.phone}\r\n        onChange={handlePhoneChange}\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"Enter email\"\r\n        value={props.email}\r\n        onChange={handleEmailChange}\r\n      />\r\n      <input type=\"submit\" value=\"Submit\" />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm.js\";\r\nimport { TileList } from \"../../components/tileList/TileList.js\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [duplicateName, setDuplicateName] = useState(false);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (duplicateName === false && name) {\r\n      props.addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const result = props.contacts.find((element) => {\r\n      return element.name === name;\r\n    });\r\n    if (result !== undefined) {\r\n      setDuplicateName(true);\r\n    }\r\n  }, [name]);\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          handleSubmit={handleSubmit}\r\n          name={name}\r\n          setName={setName}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList list={props.contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [appointments, setAppointments] = useState([{}]);\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const addContact = (name, phone, email) => {\r\n    setContacts((prevContacts) => {\r\n      const contact = {\r\n        name,\r\n        phone,\r\n        email,\r\n      };\r\n      return [...prevContacts, contact];\r\n    });\r\n  };\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments((prevAppointments) => {\r\n      const appointment = {\r\n        title,\r\n        contact,\r\n        date,\r\n        time,\r\n      };\r\n      return [...prevAppointments, appointment];\r\n    });\r\n  };\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <Link to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </Link>\r\n        <Link to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </Link>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n            {/* Add props to ContactsPage */}\r\n            <ContactsPage contacts={contacts} addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n              appointments={appointments}\r\n              contacts={contacts}\r\n              addAppointment={addAppointment}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}